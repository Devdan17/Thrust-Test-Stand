/*
   -------------------------------------------------------------------------------------
   HX711_ADC
   Arduino library for HX711 24-Bit Analog-to-Digital Converter for Weight Scales
   Olav Kallhovd sept2017
   -------------------------------------------------------------------------------------
*/

/*
   Settling time (number of samples) and data filtering can be adjusted in the config.h file
   For calibration and storing the calibration value in eeprom, see example file "Calibration.ino"

   The update() function checks for new data and starts the next conversion. In order to achieve maximum effective
   sample rate, update() should be called at least as often as the HX711 sample rate; >10Hz@10SPS, >80Hz@80SPS.
   If you have other time consuming code running (i.e. a graphical LCD), consider calling update() from an interrupt routine,
   see example file "Read_1x_load_cell_interrupt_driven.ino".

   This is an example sketch on how to use this library
*/

#include <HX711_ADC.h>
#if defined(ESP8266) || defined(ESP32) || defined(AVR)
#include <EEPROM.h>
#endif
#include <Servo.h>

// pins:
const int HX711_dout = 4; // mcu > HX711 dout pin
const int HX711_sck = 5; // mcu > HX711 sck pin
const int sensorPin = 2; // IR sensor connected to digital pin 2
const int joystickYPin = A1; // Analog pin for the joystick Y-axis
const int escPin = 9; // ESC signal pin

// HX711 constructor:
HX711_ADC LoadCell(HX711_dout, HX711_sck);

// Create a Servo object to control the ESC
Servo esc;

const int calVal_eepromAdress = 0;
unsigned long t = 0;
unsigned long prevTime = 0;
unsigned long currentTime;
unsigned int rpm;
volatile unsigned int count = 0;

void setup() {
  Serial.begin(9600); delay(10);
  Serial.println();
  Serial.println("Starting...");

  LoadCell.begin();
  // LoadCell.setReverseOutput(); // uncomment to turn a negative output value to positive
  float calibrationValue; // calibration value (see example file "Calibration.ino")
  calibrationValue = 696.0; // uncomment this if you want to set the calibration value in the sketch
#if defined(ESP8266) || defined(ESP32)
  // EEPROM.begin(512); // uncomment this if you use ESP8266/ESP32 and want to fetch the calibration value from eeprom
#endif
  // EEPROM.get(calVal_eepromAdress, calibrationValue); // uncomment this if you want to fetch the calibration value from eeprom

  unsigned long stabilizingtime = 2000; // precision right after power-up can be improved by adding a few seconds of stabilizing time
  boolean _tare = true; // set this to false if you don't want tare to be performed in the next step
  LoadCell.start(stabilizingtime, _tare);
  if (LoadCell.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 wiring and pin designations");
    while (1);
  } else {
    LoadCell.setCalFactor(calibrationValue); // set calibration value (float)
    Serial.println("Startup is complete");
  }

  pinMode(sensorPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(sensorPin), countRPM, RISING);

  // Attach the ESC to the signal pin
  esc.attach(escPin);
}

void loop() {
  static boolean newDataReady = 0;
  const int serialPrintInterval = 0; // increase value to slow down serial print activity

  // check for new data/start next conversion:
  if (LoadCell.update()) newDataReady = true;

  // get smoothed value from the dataset:
  if (newDataReady) {
    if (millis() > t + serialPrintInterval) {
      float i = LoadCell.getData();
      Serial.print("Load_cell output val: ");
      Serial.println(i);
      newDataReady = 0;
      t = millis();
    }
  }

  // receive command from serial terminal, send 't' to initiate tare operation:
  if (Serial.available() > 0) {
    char inByte = Serial.read();
    if (inByte == 't') LoadCell.tareNoDelay();
  }

  // check if last tare operation is complete:
  if (LoadCell.getTareStatus() == true) {
    Serial.println("Tare complete");
  }

  // Calculate RPM every second:
  currentTime = millis();
  if (currentTime - prevTime >= 1000) {
    rpm = 60 *100 / (currentTime - prevTime) * count;
    Serial.print("RPM: ");
    Serial.println(rpm);
    count = 0;
    prevTime = currentTime;
  }

  // Read the analog value from the joystick Y-axis
  int yValue = analogRead(joystickYPin);

  // Map the analog value (0-1023) to a pulse width in microseconds (1000-2000)
  int escPulseWidth = map(yValue, 0, 1023, 1000, 2000);

  // Output the pulse width to the ESC
  esc.writeMicroseconds(escPulseWidth);

  // Print the values to the Serial Monitor for debugging
  Serial.print("Y: ");
  Serial.print(yValue);
  Serial.print(" -> ESC Pulse Width: ");
  delay(500);
  Serial.println(escPulseWidth);

  // Small delay to stabilize readings
  delay(10);
}

void countRPM() {
  count++;
}
